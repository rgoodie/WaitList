<?php

/**
 * @file
 * TODO: Enter file description here.
 */

/**
 * Implements hook_user_login().
 */
function waitlist_user_login(&$edit, $account)
{
    global $user;
    watchdog('waitlist', $user->name);

    // Are there any roles on this users wait list?
    $roles = WaitList::getRolesforUserOnWaitList($user->name);

    // No roles.
    if ($roles == FALSE) {
        watchdog('waitlist', t("No roles waiting for this user @u", array(
            '@u' => $user->name
        )));
    }

    // Not false. Let's give this a try.
    else {
        watchdog('waitlist', t("@u is wait-listed to @r", array(
            '@u' => $user->name,
            '@r' => implode(", ", $roles)
        )));

        // Run loop to add each role
        foreach ($roles as $role) {
            WaitList::addRoleToExistingAccount($user->uid, $role);
        }

        // remove request from wait list
        WaitList::deleteRequest($user->name);

    }

}

/**
 * Implements hook_menu().
 */
function waitlist_menu()
{
    $items = array();
    $items['admin/people/permissions/waitlist'] = array(
        'title' => t('Wait List'),
        'description' => 'Configure settings for User Waitlist.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('waitlist_settings_form'),
        'access arguments' => array('administer waitlist'),
        'file' => 'waitlist.admin.inc',
        'type' => MENU_LOCAL_TASK,
    );

    $items['admin/people/permissions/waitlist/%'] = array(
        'title' => 'Delete item',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('waitlist_delete_request_form', 4),
        'access arguments' => array('administer waitlist'),
        'type' => MENU_CALLBACK,
    );


    return $items;
}

/**
 * Implements hook_permission().
 */
function waitlist_permission()
{
    $permissions = array();

    $permissions['waitlist_seelist,'] = array(
        'title' => t('TODO: enter permission title'),
        'description' => t('TODO: enter permission description'),
    );
    $permissions['waitlist_addtolist'] = array(
        'title' => t('TODO: enter permission title'),
        'description' => t('TODO: enter permission description'),
    );
    $permissions['administer waitlist'] = array(
        'title' => t('TODO: enter permission title'),
        'description' => t('TODO: enter permission description'),
    );

    return $permissions;
}


/**
 * Implements hook_cron().
 * To save space, this is a wrapper for the separate internal class.
 */
function waitlist_cron()
{
    WaitList::moveNamesIntoWaitList();

}


/**
 * Form asking for delete confirmation
 * @param $form
 * @param $form_state
 * @param $the_id
 * @return array|mixed
 */
function waitlist_delete_request_form($form, &$form_state, $username)
{

    // kpr($form);
    // kpr($form_state);


    $username = filter_var($username, FILTER_SANITIZE_STRING);

    $requested_roles = WaitList::getRolesforUserOnWaitList($username);

    // Catch empty request
    if (empty($requested_roles[0])) {
        $msg = t("@u does not seem to have any (new) requests pending", array('@u' => $username));
        watchdog('waitlist', $msg);
        drupal_set_message($msg);
        $form[] = array('#markup' => t("<h2>@t</h2> <p>Please return to !l</p>", array(
            '@t' => ucfirst($msg),
            '!l' => l('admin page', 'admin/people/permissions/waitlist')
        )));
        return $form;
    }


    $form = array();
    $form[] = array('#markup' => theme_item_list(array(
        'title' => t(sprintf("The request to remove <em>%s</em> from the following groups:", $username)),
        'items' => $requested_roles,
        'type' => 'ul',
        'attributes' => array()
    )));
    $form['username'] = array(
        '#type' => 'value',
        '#value' => $username,
    );
    $form['#submit'] = array('waitlist_delete_request_form_submit');

    return confirm_form(
        $form,
        t('Are you sure you want to delete this item?'),
        '/admin/people/permissions/waitlist',
        t('This action cannot be undone.'),
        t('Delete'),
        t('Cancel')
    );


}

/**
 * submit handler for delete request form's confirm_form()
 *
 */
function waitlist_delete_request_form_submit($form, &$form_state)
{
    $username = filter_var($form_state['values']['username'], FILTER_SANITIZE_STRING);
    WaitList::deleteRequest($username);
    return drupal_goto('admin/people/permissions/waitlist');

}